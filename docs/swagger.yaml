basePath: http://localhost:8080
definitions:
  models.ChangePasswordDto:
    properties:
      NewPassword:
        example: newPassword456
        minLength: 6
        type: string
      OldPassword:
        example: oldPassword123
        minLength: 6
        type: string
      email:
        example: john.doe@example.com
        type: string
    required:
    - NewPassword
    - OldPassword
    - email
    type: object
  models.CreateUserRequestDTO:
    properties:
      email:
        example: john.doe@example.com
        type: string
      firstName:
        example: John
        maxLength: 50
        minLength: 2
        type: string
      lastName:
        example: Doe
        maxLength: 50
        minLength: 2
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      userName:
        example: johndoe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    - userName
    type: object
  models.ResendVerificationRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
    required:
    - email
    type: object
  models.UpdateUserRequestDTO:
    properties:
      email:
        example: john.updated@example.com
        type: string
      firstName:
        example: John_updated
        type: string
      lastName:
        example: Doe_updated
        type: string
      userName:
        example: johndoe_updated
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      isVerified:
        type: boolean
      lastName:
        type: string
      password:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      userName:
        type: string
    type: object
  models.UserLoginDTO:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      passwordConfirm:
        type: string
    required:
    - email
    - password
    - passwordConfirm
    type: object
  models.UserResponseDTO:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      role:
        type: string
      userName:
        type: string
    type: object
  models.VerificationEmailDto:
    properties:
      code:
        example: "123456"
        type: string
      email:
        example: john.doe@example.com
        type: string
    required:
    - code
    - email
    type: object
host: localhost:8080
info:
  contact:
    email: zaharborisenko617@gmail.com
    name: tg:@zaharweb007
  description: JWT Authentication API with Go
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: JWT Auth API
  version: "1.0"
paths:
  /admin/blacklist:
    get:
      consumes:
      - application/json
      description: Get list of blacklisted JWT tokens (Admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get blacklisted tokens
      tags:
      - admin
  /admin/user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by ID (Admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get paginated list of all users (Admin only)
      parameters:
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - default: 10
        description: Limit for pagination
        in: query
        name: limit
        type: integer
      - default: created_at
        description: Sort field
        in: query
        name: sort
        type: string
      - default: desc
        description: Sort order
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - admin
  /change-password:
    post:
      consumes:
      - application/json
      description: Change password for authenticated user
      parameters:
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - authentication
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and get JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - authentication
  /logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - authentication
  /profile/{id}:
    get:
      consumes:
      - application/json
      description: Get user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponseDTO'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register new user
      tags:
      - authentication
  /resend-verification:
    post:
      consumes:
      - application/json
      description: Resend email verification code
      parameters:
      - description: Email address
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ResendVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Resend verification code
      tags:
      - authentication
  /verify-email:
    post:
      consumes:
      - application/json
      description: Verify user email with verification code
      parameters:
      - description: Verification data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.VerificationEmailDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify email
      tags:
      - authentication
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
